version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:3001
      - VITE_BECKN_GATEWAY_URL=http://beckn-gateway:8080
      - VITE_BLOCKCHAIN_RPC_URL=http://blockchain:8545
    depends_on:
      - backend
      - redis
    networks:
      - villagestay-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/villagestay
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - BECKN_GATEWAY_URL=http://beckn-gateway:8080
      - BLOCKCHAIN_RPC_URL=http://blockchain:8545
    depends_on:
      - postgres
      - redis
      - blockchain
    networks:
      - villagestay-network
    restart: unless-stopped
    volumes:
      - ../backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=villagestay
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - villagestay-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - villagestay-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Beckn Protocol Gateway
  beckn-gateway:
    image: beckn/protocol-server:latest
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/beckn
      - REDIS_URL=redis://redis:6379
      - REGISTRY_URL=https://registry.beckn.org
    depends_on:
      - postgres
      - redis
    networks:
      - villagestay-network
    restart: unless-stopped
    volumes:
      - ./beckn-config.yml:/app/config/default.yml

  # Blockchain Node (Ethereum-compatible)
  blockchain:
    image: ethereum/client-go:latest
    ports:
      - "8545:8545"
      - "8546:8546"
      - "30303:30303"
    command: >
      --dev
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.corsdomain="*"
      --http.api=eth,net,web3,personal,miner
      --ws
      --ws.addr=0.0.0.0
      --ws.port=8546
      --ws.origins="*"
      --ws.api=eth,net,web3,personal,miner
      --allow-insecure-unlock
      --rpc.allow-unprotected-txs
    volumes:
      - blockchain_data:/root/.ethereum
    networks:
      - villagestay-network
    restart: unless-stopped

  # IPFS for Decentralized Storage
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8081:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - villagestay-network
    restart: unless-stopped
    environment:
      - IPFS_PROFILE=server

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - villagestay-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - villagestay-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - villagestay-network
    restart: unless-stopped

  # Kibana for Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - villagestay-network
    restart: unless-stopped

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - villagestay-network
    restart: unless-stopped

  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./ssl:/etc/ssl/certs
    depends_on:
      - frontend
      - backend
    networks:
      - villagestay-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  blockchain_data:
  ipfs_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  rabbitmq_data:

networks:
  villagestay-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16